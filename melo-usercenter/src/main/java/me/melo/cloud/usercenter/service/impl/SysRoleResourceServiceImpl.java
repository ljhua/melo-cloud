package me.melo.cloud.usercenter.service.impl;import cn.hutool.core.collection.CollectionUtil;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import lombok.RequiredArgsConstructor;import me.melo.cloud.common.constant.AuthConstant;import me.melo.cloud.usercenter.entity.SysResource;import me.melo.cloud.usercenter.entity.SysRole;import me.melo.cloud.usercenter.entity.SysRoleResource;import me.melo.cloud.usercenter.mapper.SysRoleResourceMapper;import me.melo.cloud.usercenter.service.ISysResourceService;import me.melo.cloud.usercenter.service.ISysRoleResourceService;import org.springframework.beans.factory.annotation.Value;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.stereotype.Service;import java.util.*;import java.util.stream.Collectors;/** * <p> * 角色和权限关联表 服务实现类 * </p> * * @author ljhua * @since 2022-08-08 */@Service@RequiredArgsConstructorpublic class SysRoleResourceServiceImpl extends ServiceImpl<SysRoleResourceMapper, SysRoleResource> implements ISysRoleResourceService {    /**     * 是否开启租户模式     */    @Value("${tenant.enable}")    private Boolean enable;    private final ISysResourceService resourceService;    private final RedisTemplate redisTemplate;    @Override    public void initResourceRoles() {        // 查询系统角色和权限的关系        List<SysResource> resourceList = resourceService.queryResourceRoles();        // 判断是否开启了租户模式，如果开启了，那么角色权限需要按租户进行分类存储        if (enable) {            Map<Long, List<SysResource>> resourceListMap = resourceList.stream().collect(Collectors.groupingBy(SysResource::getTenantId));            resourceListMap.forEach((key, value) -> {                String redisKey = AuthConstant.TENANT_RESOURCE_ROLES_KEY + key;                redisTemplate.delete(redisKey);                addRoleResource(redisKey, value);            });        } else {            redisTemplate.delete(AuthConstant.RESOURCE_ROLES_KEY);            addRoleResource(AuthConstant.RESOURCE_ROLES_KEY, resourceList);        }    }    private void addRoleResource(String key, List<SysResource> resourceList) {        Map<String, List<String>> resourceRolesMap = new TreeMap<>();        Optional.ofNullable(resourceList).orElse(new ArrayList<>()).forEach(resource -> {            // roleKey -> ROLE_{roleKey}            List<String> roleKeys = Optional.ofNullable(resource.getRoles()).orElse(new ArrayList<>()).stream().map(SysRole::getRoleKey)                    .distinct().map(roleKey -> AuthConstant.AUTHORITY_PREFIX + roleKey).collect(Collectors.toList());            if (CollectionUtil.isNotEmpty(roleKeys)) {                resourceRolesMap.put(resource.getResourceUrl(), roleKeys);            }        });        redisTemplate.opsForHash().putAll(key, resourceRolesMap);    }}