spring:  datasource:    druid:      url: jdbc:mysql://localhost:3306/melo_cloud?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=UTC      username: root      password: ljh@docker123Mysql#      driver-class-name: com.mysql.cj.jdbc.Driver      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法或者第一次getConnection时      initial-size: 5      # 最大连接数量      max-active: 20      # 最小连接池数量      min-idle: 5      # 获取连接时最大等待时间，单位毫秒。配置了maxWait后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁      max-wait: 60000      # 是否缓存preparedStatement，也就是psCache。psCache对支持游标的数据库性能提升巨大，比如说oracle。再mysql5.5以下的版本中没有psCache功能建议关掉。      # 5.5以上版本有psCache，建议开启      pool-prepared-statements: true      max-pool-prepared-statement-per-connection-size: 20      # 用来校验连接是否有效的sql，要求是一个查询语句。如果validation-query为null，testOnBorrow，testOnReturn，testWhileIdle都不会起作用      validation-query: SELECT 'x'      # 申请连接时执行validation-query检测是否有效，做了这个配置会降低性能      test-on-borrow: false      # 申请连接时执行validation-query检测是否有效，做了这个配置会降低性能      test-on-return: false      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测是否有效      test-while-idle: true      # 有两个含义：1.destroy线程会检测连接的间隔时间  2.testWhileIdle的判断依据，详细看testWhileIdle属性的说明      time-between-eviction-runs-millis: 60000      # 连接最大生存时间      #      max-evictable-idle-time-millis: 600000      # 连接最小生存时间      min-evictable-idle-time-millis: 300000      # 配置过滤监控，访问http://localhost:8011/druid/weburi.html可以查看各种统计信息      filters: wall,stat      filter:        stat:          merge-sql: true        wall:          enabled: true      web-stat-filter:        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"        profile-enable: true      db-type: mysql      reset-stat-enable: false  redis:    host: 127.0.0.1    port: 6379    ssl: false    timeout: 2000mybatis-plus:  configuration:    map-underscore-to-camel-case: true    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  mapper-locations: classpath:mapper/*Mapper.xml# 多租户配置tenant:  # 是否开启租户模式  enable: true