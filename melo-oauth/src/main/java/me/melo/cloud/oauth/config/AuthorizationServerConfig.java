package me.melo.cloud.oauth.config;import lombok.RequiredArgsConstructor;import me.melo.cloud.oauth.granter.AppCaptchaPasswordTokenGranter;import me.melo.cloud.oauth.granter.AppSmsCodeTokenGranter;import me.melo.cloud.oauth.granter.WebCaptchaPasswordTokenGranter;import me.melo.cloud.oauth.granter.WebSmsCodeTokenGranter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.io.ClassPathResource;import org.springframework.http.HttpMethod;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;import org.springframework.security.oauth2.provider.ClientDetailsService;import org.springframework.security.oauth2.provider.CompositeTokenGranter;import org.springframework.security.oauth2.provider.client.ClientCredentialsTokenGranter;import org.springframework.security.oauth2.provider.client.JdbcClientDetailsService;import org.springframework.security.oauth2.provider.code.AuthorizationCodeTokenGranter;import org.springframework.security.oauth2.provider.implicit.ImplicitTokenGranter;import org.springframework.security.oauth2.provider.refresh.RefreshTokenGranter;import org.springframework.security.oauth2.provider.token.*;import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;import org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory;import javax.sql.DataSource;import java.security.KeyPair;import java.util.*;@Configuration@EnableAuthorizationServer@RequiredArgsConstructor(onConstructor_ = @Autowired)public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {    private final AuthenticationManager authenticationManager;    private final DataSource dataSource;    private final ClientDetailsService clientDetailsService;    @Override    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {        security.tokenKeyAccess("permitAll()")                .checkTokenAccess("permitAll()")                .allowFormAuthenticationForClients();    }    @Override    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {        JdbcClientDetailsService jdbcClientDetailsService = new JdbcClientDetailsService(dataSource);        clients.withClientDetails(jdbcClientDetailsService);    }    @Override    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {        TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();        List<TokenEnhancer> tokenEnhancerList = new ArrayList<>();        tokenEnhancerList.add(tokenEnhancer());        tokenEnhancerList.add(jwtAccessTokenConverter());        tokenEnhancerChain.setTokenEnhancers(tokenEnhancerList);        endpoints.authenticationManager(authenticationManager)                .accessTokenConverter(jwtAccessTokenConverter())                .tokenEnhancer(tokenEnhancerChain)                .tokenServices(tokenServices(endpoints))                .allowedTokenEndpointRequestMethods(HttpMethod.POST)                .tokenGranter((grantType, tokenRequest) -> {                    CompositeTokenGranter granter = new CompositeTokenGranter(                            Arrays.asList(                                    new AuthorizationCodeTokenGranter(endpoints.getTokenServices(), endpoints.getAuthorizationCodeServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()),                                    new RefreshTokenGranter(endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()),                                    new ImplicitTokenGranter(endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()),                                    new ClientCredentialsTokenGranter(endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()),                                    new WebCaptchaPasswordTokenGranter(authenticationManager, endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()),                                    new WebSmsCodeTokenGranter(authenticationManager, endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()),                                    new AppCaptchaPasswordTokenGranter(authenticationManager, endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()),                                    new AppSmsCodeTokenGranter(authenticationManager, endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory())                            )                    );                    return granter.grant(grantType, tokenRequest);                });    }    @Bean    public JwtAccessTokenConverter jwtAccessTokenConverter() {        JwtAccessTokenConverter jwtAccessTokenConverter = new JwtAccessTokenConverter();        jwtAccessTokenConverter.setKeyPair(keyPair());        return jwtAccessTokenConverter;    }    @Bean    public KeyPair keyPair() {        KeyStoreKeyFactory factory = new KeyStoreKeyFactory(new ClassPathResource("gitegg.jks"), "123456".toCharArray());        KeyPair keyPair = factory.getKeyPair("gitegg", "123456".toCharArray());        return keyPair;    }    @Bean    public TokenStore tokenStore() {        return new JwtTokenStore(jwtAccessTokenConverter());    }    @Bean    public TokenEnhancer tokenEnhancer() {        return (accessToken, authentication) -> {            Map<String, Object> map = new HashMap<>();            map.put("loginName", "刘君华");            ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(map);            return accessToken;        };    }    public AuthorizationServerTokenServices tokenServices(AuthorizationServerEndpointsConfigurer endpoints) {        DefaultTokenServices services = new MeloTokenServices();        // 客户端详情服务        services.setClientDetailsService(clientDetailsService);        // 允许令牌自动刷新        services.setSupportRefreshToken(true);        // 令牌存储策略-jwt        services.setTokenStore(tokenStore());        // token加强        services.setTokenEnhancer(endpoints.getTokenEnhancer());        // 令牌默认有效期2小时        services.setAccessTokenValiditySeconds(7200);        // 刷新令牌默认有效期3天        services.setRefreshTokenValiditySeconds(259200);        return services;    }}