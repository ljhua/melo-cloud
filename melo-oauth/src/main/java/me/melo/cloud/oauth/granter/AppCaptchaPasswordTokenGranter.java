package me.melo.cloud.oauth.granter;import me.melo.cloud.oauth.token.AppCaptchaPasswordAuthenticationToken;import org.springframework.security.authentication.AbstractAuthenticationToken;import org.springframework.security.authentication.AccountStatusException;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.core.Authentication;import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;import org.springframework.security.oauth2.provider.*;import org.springframework.security.oauth2.provider.token.AbstractTokenGranter;import org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;import java.util.LinkedHashMap;import java.util.Map;public class AppCaptchaPasswordTokenGranter extends AbstractTokenGranter {    private static final String GRANT_TYPE = "app_password";    private final AuthenticationManager authenticationManager;    public AppCaptchaPasswordTokenGranter(AuthenticationManager authenticationManager, AuthorizationServerTokenServices tokenServices, ClientDetailsService clientDetailsService, OAuth2RequestFactory requestFactory) {        this(authenticationManager, tokenServices, clientDetailsService, requestFactory, GRANT_TYPE);    }    protected AppCaptchaPasswordTokenGranter(AuthenticationManager authenticationManager, AuthorizationServerTokenServices tokenServices, ClientDetailsService clientDetailsService, OAuth2RequestFactory requestFactory, String grantType) {        super(tokenServices, clientDetailsService, requestFactory, grantType);        this.authenticationManager = authenticationManager;    }    @Override    protected OAuth2Authentication getOAuth2Authentication(ClientDetails client, TokenRequest tokenRequest) {        Map<String, String> parameters = new LinkedHashMap(tokenRequest.getRequestParameters());        String username = parameters.get("username");        String password = parameters.get("password");        String captcha = parameters.get("captcha");        // 从Redis取缓存的验证码        String cacheCaptcha = "1234";        if (cacheCaptcha == null || "".equals(cacheCaptcha)) {            throw new InvalidGrantException("验证码已失效，请重新获取");        }        if (!cacheCaptcha.equals(captcha)) {            throw new InvalidGrantException("验证码错误");        }        Authentication userAuth = new AppCaptchaPasswordAuthenticationToken(username, password);        ((AbstractAuthenticationToken) userAuth).setDetails(parameters);        try {            userAuth = this.authenticationManager.authenticate(userAuth);        } catch (AccountStatusException var8) {            throw new InvalidGrantException(var8.getMessage());        } catch (BadCredentialsException var9) {            throw new InvalidGrantException(var9.getMessage());        }        if (userAuth != null && userAuth.isAuthenticated()) {            OAuth2Request storedOAuth2Request = this.getRequestFactory().createOAuth2Request(client, tokenRequest);            return new OAuth2Authentication(storedOAuth2Request, userAuth);        } else {            throw new InvalidGrantException("Could not authenticate user: " + username);        }    }}