package me.melo.cloud.oauth.service;import cn.hutool.core.bean.BeanUtil;import cn.hutool.core.collection.CollectionUtil;import lombok.RequiredArgsConstructor;import me.melo.cloud.common.constant.MeloConstant;import me.melo.cloud.common.domain.MeloUser;import me.melo.cloud.common.enums.ResultCodeEnum;import me.melo.cloud.common.result.Result;import me.melo.cloud.usercenter.client.feign.ISysUserFeign;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.oauth2.common.exceptions.UserDeniedAuthorizationException;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.Collection;import java.util.List;@RequiredArgsConstructor@Servicepublic class UserDetailsServiceImpl implements UserDetailsService {    private final ISysUserFeign sysUserFeign;    @Override    public MeloUserDetails loadUserByUsername(String userName) throws UsernameNotFoundException {        Result<Object> result = sysUserFeign.queryUserByAccount(userName);        if (result != null && result.isSuccess()) {            MeloUser meloUser = new MeloUser();            BeanUtil.copyProperties(result.getData(), meloUser, false);            // 没有查询到用户，用户名或密码错误            if (meloUser == null || meloUser.getId() == null) {                throw new UsernameNotFoundException(ResultCodeEnum.INVALID_USERNAME.getMsg());            }            // 没有角色            if (CollectionUtil.isEmpty(meloUser.getRoleIdList())) {                throw new UserDeniedAuthorizationException(ResultCodeEnum.INVALID_ROLE.getMsg());            }            return new MeloUserDetails(meloUser.getId(), meloUser.getTenantId(), meloUser.getOauthId(),                    meloUser.getNickname(), meloUser.getRealName(), meloUser.getOrgId(),                    meloUser.getOrgName(),                    meloUser.getOrgIds(), meloUser.getOrgNames(), meloUser.getRoleId(), meloUser.getRoleIds(), meloUser.getRoleName(), meloUser.getRoleNames(),                    meloUser.getRoleIdList(), meloUser.getRoleKeyList(), meloUser.getResourceKeyList(),                    meloUser.getDataPermissionTypeList(), meloUser.getOrgIdList(),                    meloUser.getAvatar(), meloUser.getAccount(), meloUser.getPassword(), !String.valueOf(MeloConstant.DISABLE).equals(meloUser.getStatus()), true, true, true,                    this.getPrivileges(meloUser.getRoleKeyList(), meloUser.getResourceUrlList()));        } else {            throw new UsernameNotFoundException(result.getMsg());        }    }    private Collection<? extends GrantedAuthority> getPrivileges(List<String> roleKeyList, List<String> resourceUrlList) {        final List<GrantedAuthority> authorities = new ArrayList<>();        for (final String role : roleKeyList) {            authorities.add(new SimpleGrantedAuthority(role));        }        return authorities;    }}